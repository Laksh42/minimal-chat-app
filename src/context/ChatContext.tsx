import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Group, Message, User, MediaItem } from '../types';\n\ninterface ChatContextType {\n  groups: Group[];\n  users: User[];\n  messages: Message[];\n  media: MediaItem[];\n  selectedGroupId: string | null;\n  selectGroup: (groupId: string) => void;\n  sendMessage: (content: string, type: 'text' | 'image' | 'video') => void;\n  getGroupById: (groupId: string) => Group | undefined;\n  getUserById: (userId: string) => User | undefined;\n  getMessagesForGroup: (groupId: string) => Message[];\n  getMediaItem: (messageId: string) => MediaItem | undefined;\n  selectedMedia: MediaItem | null;\n  setSelectedMedia: (media: MediaItem | null) => void;\n  isLoading: boolean;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport const ChatProvider = ({ children }: { children: ReactNode }) => {\n  const [data, setData] = useState<{\n    groups: Group[];\n    users: User[];\n    messages: Message[];\n    media: MediaItem[];\n  }>({\n    groups: [],\n    users: [],\n    messages: [],\n    media: [],\n  });\n  const [selectedGroupId, setSelectedGroupId] = useState<string | null>(null);\n  const [selectedMedia, setSelectedMedia] = useState<MediaItem | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const response = await fetch('/data/groups.json');\n        const jsonData = await response.json();\n        setData(jsonData);\n        \n        // Set the first group as selected by default\n        if (jsonData.groups && jsonData.groups.length > 0) {\n          setSelectedGroupId(jsonData.groups[0].id);\n        }\n        \n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error loading data:', error);\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const selectGroup = (groupId: string) => {\n    setSelectedGroupId(groupId);\n    \n    // Mark messages as read by updating the unread count\n    setData(prevData => ({\n      ...prevData,\n      groups: prevData.groups.map(group => \n        group.id === groupId ? { ...group, unreadCount: 0 } : group\n      )\n    }));\n  };\n\n  const sendMessage = (content: string, type: 'text' | 'image' | 'video') => {\n    if (!selectedGroupId || !content.trim()) return;\n\n    const newMessage: Message = {\n      id: `msg${Date.now()}`,\n      groupId: selectedGroupId,\n      senderId: 'user1', // Current user\n      timestamp: Date.now(),\n      content,\n      type,\n      status: 'sent',\n    };\n\n    // Add media item if it's an image or video\n    if (type !== 'text') {\n      const newMedia: MediaItem = {\n        id: `media${Date.now()}`,\n        messageId: newMessage.id,\n        url: content,\n        type: type,\n      };\n\n      setData(prevData => ({\n        ...prevData,\n        media: [...prevData.media, newMedia],\n      }));\n    }\n\n    // Add the new message and update the group's last message\n    setData(prevData => ({\n      ...prevData,\n      messages: [...prevData.messages, newMessage],\n      groups: prevData.groups.map(group => \n        group.id === selectedGroupId \n          ? { ...group, lastMessage: newMessage } \n          : group\n      )\n    }));\n  };\n\n  const getGroupById = (groupId: string) => {\n    return data.groups.find(group => group.id === groupId);\n  };\n\n  const getUserById = (userId: string) => {\n    return data.users.find(user => user.id === userId);\n  };\n\n  const getMessagesForGroup = (groupId: string) => {\n    return data.messages.filter(message => message.groupId === groupId);\n  };\n\n  const getMediaItem = (messageId: string) => {\n    return data.media.find(media => media.messageId === messageId);\n  };\n\n  const value = {\n    groups: data.groups,\n    users: data.users,\n    messages: data.messages,\n    media: data.media,\n    selectedGroupId,\n    selectGroup,\n    sendMessage,\n    getGroupById,\n    getUserById,\n    getMessagesForGroup,\n    getMediaItem,\n    selectedMedia,\n    setSelectedMedia,\n    isLoading,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};