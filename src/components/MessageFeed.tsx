import React, { useEffect, useRef } from 'react';\nimport { useChat } from '../context/ChatContext';\nimport { Message, MediaItem } from '../types';\n\nconst MessageFeed: React.FC = () => {\n  const { messages, users, getUserById, media, setSelectedMedia } = useChat();\n  const endOfMessagesRef = useRef<HTMLDivElement>(null);\n  \n  // Scroll to bottom on new messages\n  useEffect(() => {\n    endOfMessagesRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleMediaClick = (mediaItem: MediaItem) => {\n    setSelectedMedia(mediaItem);\n  };\n\n  // Group messages by date\n  const groupedMessages: { [key: string]: Message[] } = {};\n  messages.forEach(message => {\n    const date = new Date(message.timestamp).toLocaleDateString();\n    if (!groupedMessages[date]) {\n      groupedMessages[date] = [];\n    }\n    groupedMessages[date].push(message);\n  });\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-[var(--color-bg-primary)]\">\n      {Object.entries(groupedMessages).map(([date, dateMessages]) => (\n        <div key={date}>\n          <div className=\"text-center my-4\">\n            <span className=\"inline-block px-3 py-1 text-xs rounded-full bg-[var(--color-bg-secondary)] text-[var(--color-text-secondary)]\">\n              {date}\n            </span>\n          </div>\n          \n          {dateMessages.map((message) => {\n            const user = getUserById(message.userId);\n            const isCurrentUser = user?.id === 'current-user';\n            const messageMedia = media.filter(m => m.messageId === message.id);\n            \n            return (\n              <div key={message.id} className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`}>\n                <div className=\"flex max-w-[85%]\">\n                  {!isCurrentUser && (\n                    <div className=\"mr-2 mt-1\">\n                      <div className=\"w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-sm font-medium\">\n                        {user?.name.charAt(0)}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className={`flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}`}>\n                    {!isCurrentUser && (\n                      <span className=\"text-xs text-[var(--color-text-secondary)] mb-1\">{user?.name}</span>\n                    )}\n                    \n                    <div \n                      className={`\n                        rounded-2xl p-3 break-words\n                        ${isCurrentUser \n                          ? 'bg-[var(--color-message-sent)] text-[var(--color-text-primary)]' \n                          : 'bg-[var(--color-message-received)] text-[var(--color-text-primary)]'}\n                      `}\n                    >\n                      <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                      \n                      {messageMedia.length > 0 && (\n                        <div className=\"mt-2 grid grid-cols-2 gap-2\">\n                          {messageMedia.map((item) => (\n                            <div \n                              key={item.id} \n                              className=\"relative cursor-pointer rounded-md overflow-hidden\"\n                              onClick={() => handleMediaClick(item)}\n                            >\n                              {item.type === 'image' ? (\n                                <img \n                                  src={item.url} \n                                  alt=\"media\" \n                                  className=\"w-full h-32 object-cover hover:opacity-90 transition-opacity\"\n                                />\n                              ) : (\n                                <div className=\"w-full h-32 bg-[var(--color-bg-secondary)] flex items-center justify-center hover:opacity-90 transition-opacity\">\n                                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-10 w-10 text-[var(--color-text-secondary)]\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                  </svg>\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <span className=\"text-xs text-[var(--color-text-secondary)] mt-1\">\n                      {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      <div ref={endOfMessagesRef} />\n    </div>\n  );\n};\n\nexport default MessageFeed;