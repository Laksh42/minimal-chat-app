import React, { useState, useRef } from 'react';\nimport { useChat } from '../context/ChatContext';\n\nconst InputArea: React.FC = () => {\n  const [message, setMessage] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { sendMessage } = useChat();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim()) {\n      sendMessage(message);\n      setMessage('');\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleAttachClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      // For demonstration, we'll just simulate sending an image or file\n      // In a real app, you would upload the file and get a URL back\n      const file = files[0];\n      const isImage = file.type.startsWith('image/');\n      const mediaUrl = isImage \n        ? 'https://source.unsplash.com/random/300x200' // Placeholder image\n        : 'https://example.com/file.pdf'; // Placeholder file URL\n      \n      sendMessage('', isImage ? 'image' : 'file', mediaUrl);\n      \n      // Reset the input\n      e.target.value = '';\n    }\n  };\n\n  const toggleRecording = () => {\n    setIsRecording(!isRecording);\n    // In a real app, you would start/stop audio recording here\n  };\n\n  return (\n    <div className=\"border-t border-[var(--color-border)] p-4 bg-[var(--color-bg-secondary)]\">\n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        <input \n          type=\"file\"\n          ref={fileInputRef}\n          className=\"hidden\"\n          onChange={handleFileChange}\n          accept=\"image/*,video/*,application/pdf,application/msword,application/vnd.ms-excel\"\n        />\n        \n        <button \n          type=\"button\"\n          onClick={handleAttachClick}\n          className=\"p-2.5 text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] hover:bg-[var(--color-hover)] rounded-md transition-colors\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\" />\n          </svg>\n        </button>\n        \n        <div className=\"flex-1 relative\">\n          <textarea \n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type a message...\"\n            className=\"w-full p-3 max-h-32 rounded-md bg-[var(--color-input-bg)] text-[var(--color-text-primary)] border border-[var(--color-border)] focus:outline-none focus:ring-1 focus:ring-[var(--color-primary)] resize-none\"\n            rows={1}\n          />\n        </div>\n        \n        {message.trim() ? (\n          <button \n            type=\"submit\"\n            className=\"p-2.5 text-white bg-[var(--color-primary)] hover:bg-[var(--color-primary-hover)] rounded-md transition-colors\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n            </svg>\n          </button>\n        ) : (\n          <button \n            type=\"button\"\n            onClick={toggleRecording}\n            className={`p-2.5 rounded-md transition-colors ${isRecording ? 'text-red-500 bg-red-100' : 'text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] hover:bg-[var(--color-hover)]'}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n            </svg>\n          </button>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default InputArea;